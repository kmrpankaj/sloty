// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN // Main admin for the entire platform
  MODERATOR // Moderator for the platform
  SUPPORT // Support agent for the platform
  TENANT_ADMIN // Admin for a specific tenant
}

// Enum for organization-specific roles within a tenant
enum OrganizationRole {
  TENANT_USER // Regular user of a tenant organization
  TENANT_MODERATOR // Moderator for a tenant organization
}

// Tenant model represents a tenant with optional custom domains and multiple organizations
model Tenant {
  id            String         @id @default(cuid())
  name          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  organizations Organization[] // Tenant can have multiple organizations (branches)
  users         User[] // Relation to users

  @@map("tenants")
}

// CustomDomain model for managing custom domains linked to tenants
model CustomDomain {
  id             String  @id @default(cuid())
  domain         String? @unique // Custom domain (e.g., custom.com)
  subdomain      String? @unique // Subdomain (optional)
  organizationId String // Links to the specific organization owning the domain
  domainVerified Boolean @default(false) // Verification status of the domain

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, domain]) // Ensures each organization has unique custom domains
  @@map("custom_domains")
}

// Organization model represents separate entities (branches) within a tenant
model Organization {
  id                 String         @id @default(cuid())
  name               String
  tenantId           String // Links the organization to a tenant
  planType           String
  subscriptionStatus Boolean
  tenantUser         TenantUser[] // Users associated with this organization
  customDomain       CustomDomain[]
  deletedAt          DateTime? // Null means the record is active; non-null means it's soft-deleted

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  @@map("organizations")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?              @map("email_verified")
  image                 String?
  password              String?
  role                  UserRole               @default(TENANT_ADMIN)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  // Tenant admin context
  tenantId              String?
  tenant                Tenant? @relation(fields: [tenantId], references: [id])

  // Linking to tenant-specific users
  tenantUsers           TenantUser[]

  @@map("users")
}

model TenantUser {
  id       String           @id @default(cuid())
  email    String           
  name     String?
  password String
  role     OrganizationRole // Role within the organization (e.g., Member, Manager, Admin)

// Links to the organization
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Field for verifying tenant-user's email separately
  emailVerified  DateTime?

// Soft delete fields
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Null means the record is active; non-null means it's soft-deleted

  // Links to the global User
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([organizationId, email]) // Ensure unique email per organization
  @@map("tenant_users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
